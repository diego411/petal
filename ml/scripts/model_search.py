import yaml
import subprocess
from ml.utils.generate_experiment_name import hash_yaml
from datetime import datetime
from pathlib import Path

model_names = [
    'tinynet_e',
    'mobilenetv3_small_050',
    'lcnet_035',
    'lcnet_050',
    'mobilenetv3_small_075',
    'mobilenetv3_small_100',
    'tf_mobilenetv3_small_minimal_100',
    'tinynet_d',
    'tf_mobilenetv3_small_075',
    'tf_mobilenetv3_small_100',
    'lcnet_075',
    'levit_128s',
    'mnasnet_small',
    'lcnet_100',
    'mobilenetv2_035',
    'ghostnet_050',
    'regnetx_002',
    'regnety_002',
    'mnasnet_050',
    'tinynet_c',
    'mobilenetv2_050',
    'levit_128',
    'semnasnet_050',
    'mixer_s32_224',
    'levit_192',
    'lcnet_150',
    'mobilenetv3_large_075',
    'gernet_s',
    'vit_tiny_r_s16_p8_224',
    'mobilenetv3_rw',
    'tf_mobilenetv3_large_075',
    'regnetx_004',
    'mobilenetv3_large_100',
    'mobilenetv3_large_100_miil',
    'ese_vovnet19b_slim_dw',
    'hardcorenas_a',
    'mnasnet_075',
    'tf_mobilenetv3_large_minimal_100',
    'ghostnet_100',
    'hardcorenas_b',
    'tinynet_b',
    'swsl_resnet18',
    'tf_mobilenetv3_large_100',
    'gluon_resnet18_v1b',
    'ssl_resnet18',
    'resnet18',
    'hardcorenas_c',
    'mobilenetv2_075',
    'mnasnet_100',
    'mnasnet_b1',
    'semnasnet_075',
    'levit_256',
    'regnety_004',
    'seresnet18',
    'hardcorenas_d',
    'legacy_seresnet18',
    'regnetx_006',
    'mobilenetv2_100',
    'spnasnet_100',
    'semnasnet_100',
    'mnasnet_a1',
    'resnet18d',
    'ghostnet_130',
    'regnety_006',
    'hardcorenas_f',
    'hardcorenas_e',
    'efficientnet_lite0',
    'ese_vovnet19b_slim',
    'tinynet_a',
    'fbnetc_100',
    'tf_efficientnetv2_b0',
    'xcit_nano_12_p16_224_dist',
    'xcit_nano_12_p16_224',
    'regnetx_008',
    'deit_tiny_patch16_224',
    'vit_tiny_patch16_224',
    'tf_efficientnet_lite0',
    'deit_tiny_distilled_patch16_224',
    'efficientnet_b0',
    'efficientnet_b1_pruned',
    'rexnet_100',
    'mnasnet_140',
    'rexnetr_100',
    'dla46_c',
    'pit_ti_distilled_224',
    'mobilenetv2_110d',
    'pit_ti_224',
    'regnety_008',
    'resnetblur18',
    'tf_efficientnet_b0',
    'tf_efficientnet_b0_ns',
    'tf_efficientnet_b0_ap',
    'skresnet18',
    'regnetz_005',
    'semnasnet_140',
    'mobilenetv2_140',
    'ese_vovnet19b_dw',
    'mobilevit_xxs',
    'visformer_tiny',
    'hrnet_w18_small',
    'nf_regnet_b0',
    'mixnet_s',
    'efficientnet_lite1',
    'dla46x_c',
    'pit_xs_224',
    'tf_mixnet_s',
    'fbnetv3_b',
    'rexnetr_130',
    'pit_xs_distilled_224',
    'resmlp_12_distilled_224',
    'resmlp_12_224',
    'tf_efficientnetv2_b1',
    'dla60x_c',
    'tf_efficientnet_lite1',
    'rexnet_130',
    'xcit_tiny_12_p16_224_dist',
    'xcit_tiny_12_p16_224',
    'resnet26',
    'mobilenetv2_120d',
    'efficientnet_es_pruned',
    'efficientnet_es',
    'repvgg_b0',
    'tf_efficientnet_es',
    'fbnetv3_d',
    'efficientnet_b2_pruned',
    'efficientnet_b0_g16_evos',
    'rexnetr_150',
    'crossvit_tiny_240',
    'mixer_s16_224',
    'resnet26d',
    'dla34',
    'ecaresnet50d_pruned',
    'rexnet_150',
    'nf_resnet26',
    'gmixer_12_224',
    'efficientnet_lite2',
    'gmlp_ti16_224',
    'crossvit_9_240',
    'regnetx_016',
    'efficientnet_cc_b0_4e',
    'crossvit_9_dagger_240',
    'tf_efficientnet_b1_ap',
    'tf_efficientnet_b1',
    'tf_efficientnet_b1_ns',
    'tf_efficientnet_lite2',
    'efficientnet_b1',
    'poolformer_s12',
    'vit_tiny_r_s16_p8_384',
    'tf_efficientnetv2_b2',
    'tf_efficientnet_cc_b0_4e',
    'mixnet_m',
    'regnety_016',
    'nf_seresnet26',
    'nf_ecaresnet26',
    'tf_mixnet_m',
    'resnest14d',
    'efficientnet_b3_pruned',
    'convnext_nano_hnf',
    'convit_tiny',
    'resnext26ts',
    'legacy_seresnext26_32x4d',
    'nf_regnet_b1',
    'resnet26t',
    'seresnext26ts',
    'eca_resnext26ts',
    'gcresnext26ts',
    'nf_regnet_b2',
    'mobilevit_xs',
    'seresnext26tn_32x4d',
    'seresnext26t_32x4d',
    'ecaresnext26t_32x4d',
    'ecaresnext50t_32x4d',
    'seresnext26d_32x4d',
    'tf_efficientnet_b2_ap',
    'tf_efficientnet_b2_ns',
    'coat_lite_tiny',
    'tf_efficientnet_b2',
    'rexnetr_200',
    'eca_botnext26ts_256',
    'rexnet_200',
    'botnet26t_256',
    'halonet26t',
    'eca_halonext26ts',
    'efficientnet_b0_gn',
    'efficientnet_b2a',
    'efficientnet_b2',
    'coat_lite_mini',
    'hrnet_w18_small_v2',
    'bat_resnext26ts',
    'resnet32ts',
    'efficientnet_em',
    'mixnet_l',
    'resnet33ts',
    'dpn68b',
    'tf_efficientnet_em',
    'dpn68',
    'seresnet33ts',
    'eca_resnet33ts',
    'lambda_resnet26t',
    'tf_mixnet_l',
    'gcresnet33ts',
    'densenet121',
    'resnest26d',
    'tv_densenet121',
    'xcit_tiny_24_p16_224_dist',
    'xcit_nano_12_p16_384_dist',
    'xcit_tiny_24_p16_224',
    'haloregnetz_b',
    'efficientnet_lite3',
    'efficientnet_b0_g8_gn',
    'densenet121d',
    'mobilevit_s',
    'regnetx_032',
    'densenetblur121d',
    'semobilevit_s',
    'tf_efficientnet_lite3',
    'tf_efficientnetv2_b3',
    'efficientnetv2_rw_t',
    'sehalonet33ts',
    'fbnetv3_g',
    'dla60x',
    'lambda_resnet26rpt_256',
    'gc_efficientnetv2_rw_t',
    'densenet169',
    'gcresnext50ts',
    'nf_regnet_b3',
    'mixnet_xl',
    'dla60_res2next',
    'xcit_nano_12_p8_224_dist',
    'xcit_nano_12_p8_224',
    'regnetz_b16',
    'ecaresnet26t',
    'gmlp_s16_224',
    'sebotnet33ts_256',
    'tf_efficientnet_b3_ap',
    'tf_efficientnet_b3',
    'tf_efficientnet_b3_ns',
    'efficientnet_b3',
    'efficientnet_b3a',
    'cait_xxs24_224',
    'coat_lite_small',
    'xcit_tiny_12_p16_384_dist',
    'vit_tiny_patch16_384',
    'regnety_032',
    'nest_tiny',
    'jx_nest_tiny',
    'efficientnet_el',
    'efficientnet_el_pruned',
    'tf_efficientnet_el',
    'xcit_tiny_12_p8_224_dist',
    'xcit_tiny_12_p8_224',
    'regnetz_c16',
    'cait_xxs36_224',
    'efficientnet_lite4',
    'coat_tiny',
    'tf_efficientnet_lite4',
    'regnetz_b16_evos',
    'efficientnet_b4',
    'xcit_tiny_24_p16_384_dist',
    'coat_mini',
    'tf_efficientnet_b4_ap',
    'tf_efficientnet_b4',
    'tf_efficientnet_b4_ns',
    'efficientnet_b3_gn',
    'xcit_nano_12_p8_384_dist',
    'xcit_tiny_24_p8_224',
    'xcit_tiny_24_p8_224_dist',
    'regnetz_c16_evos',
    'efficientnet_b3_g8_gn',
    'halonet_h1',
    'xcit_tiny_12_p8_384_dist',
    'cait_xxs24_384',
    'xcit_tiny_24_p8_384_dist',
    'cait_xxs36_384'
]

CONFIG_PATH = 'ml/scripts/configs/vision_config.yaml'
OUT_PATH = 'logs/model_search_output.txt'

def run_fit():
    process = subprocess.Popen(["bash", "ml/scripts/fit_vision_cnn.sh"], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)

    assert process.stdout is not None
    for line in process.stdout:
        print(line, end="")

    process.wait()
    print("Script finished.")

if __name__ == '__main__':
    with open(OUT_PATH, 'w') as file:
        file.write('experiment_hash, model_name, seconds, success \n') 
    
    for model_name in model_names:
        start = datetime.now()
        
        with open(CONFIG_PATH, 'r') as file:
            yaml_data = yaml.safe_load(file)
        
        yaml_data['model']['init_args']['pretrained_model_name'] = model_name
        yaml_data['data']['init_args']['pretrained_model_name'] = model_name
        
        with open(CONFIG_PATH, "w") as file:
            yaml.dump(yaml_data, file, default_flow_style=False)
        
        hash = hash_yaml(CONFIG_PATH)
        success = True
        experiment_path = Path('ml/experiments') / hash
        if experiment_path.exists():
            print(f"Skipping {model_name} since experiment with {hash} already exists")
            continue

        print(f'Checking out model {model_name}')
        try:
            run_fit()
        except Exception as e:
            print(e)
            success = False

        duration = (datetime.now() - start).seconds
        with open(OUT_PATH, "a") as file:
            file.write(f'{hash}, {model_name}, {duration}, {success}\n') 

